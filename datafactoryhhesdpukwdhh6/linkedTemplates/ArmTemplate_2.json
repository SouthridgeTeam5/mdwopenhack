{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactoryhhesdpukwdhh6"
		},
		"Trigger_bx8_properties_pipeline_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalCopyPipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IncrementalCopyToCurated",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "rawdata/cloudsales/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}/@{formatDateTime(pipeline().parameters.windowStart,'HH')}/*"
							},
							{
								"name": "Destination",
								"value": "curated/customer/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureDataLakeSouthridgeStorage",
										"type": "LinkedServiceReference"
									},
									"path": "logs"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_bx8",
								"type": "DatasetReference",
								"parameters": {
									"cw_fileName": "@{formatDateTime(pipeline().parameters.windowStart,'HH')}",
									"cw_folderPath": "cloudsales/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_bx8",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_0e6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerVanarsdel",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CuratedAddress2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CloudSalesAddressData",
								"type": "DatasetReference"
							},
							"name": "CuratedAddress1"
						},
						{
							"dataset": {
								"referenceName": "CloudStreamingAddressData",
								"type": "DatasetReference"
							},
							"name": "CuratedAddress2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CloudSalesAddress",
								"type": "DatasetReference"
							},
							"name": "CloudSalesAddressSink1"
						},
						{
							"dataset": {
								"referenceName": "CloudStreamingAddressData2",
								"type": "DatasetReference"
							},
							"name": "CloudStreamingAddressSink2"
						}
					],
					"transformations": [
						{
							"name": "CloudSalesAddress2"
						},
						{
							"name": "CloudSalesAddress3"
						},
						{
							"name": "CloudStreamingAddress2"
						},
						{
							"name": "CloudStreamingAddress3"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						}
					],
					"script": "source(output(\n\t\tAddressID as string,\n\t\tCustomerID as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tZipCode as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CuratedAddress1\nsource(output(\n\t\tAddressID as string,\n\t\tCustomerID as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tZipCode as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CuratedAddress2\nCuratedAddress1 derive(source = \"1\") ~> CloudSalesAddress2\nCloudSalesAddress2 derive(UniqueID = source + CustomerID + AddressID) ~> CloudSalesAddress3\nCuratedAddress2 derive(source = \"1\") ~> CloudStreamingAddress2\nCloudStreamingAddress2 derive(UniqueID = source + CustomerID + AddressID) ~> CloudStreamingAddress3\nCloudSalesAddress3 select(mapColumn(\n\t\tAddressID,\n\t\tCustomerID,\n\t\tAddressLine1,\n\t\tAddressLine2,\n\t\tCity,\n\t\tState,\n\t\tZipCode,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tsource,\n\t\tUniqueID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nCloudStreamingAddress3 select(mapColumn(\n\t\tAddressID,\n\t\tCustomerID,\n\t\tAddressLine1,\n\t\tAddressLine2,\n\t\tCity,\n\t\tState,\n\t\tZipCode,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tsource,\n\t\tUniqueID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CloudSalesAddressSink1\nSelect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CloudStreamingAddressSink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CuratedCustomerDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerDataSetCloudSales",
								"type": "DatasetReference"
							},
							"name": "CloudSales"
						},
						{
							"dataset": {
								"referenceName": "CustomerDataSetCloudStreaming",
								"type": "DatasetReference"
							},
							"name": "CloudStreaming"
						},
						{
							"dataset": {
								"referenceName": "CustomerDataSetFourthCoffeeRentals",
								"type": "DatasetReference"
							},
							"name": "FourthCoffeeRentals"
						},
						{
							"dataset": {
								"referenceName": "CustomerDataSetOnPremRentals",
								"type": "DatasetReference"
							},
							"name": "OnPremRentals"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerCloudSalesParquet",
								"type": "DatasetReference"
							},
							"name": "CustomerCloudSalesSink"
						},
						{
							"dataset": {
								"referenceName": "CustomerCloudStreamingParquet",
								"type": "DatasetReference"
							},
							"name": "CustomerCloudStreamingParquetSink"
						},
						{
							"dataset": {
								"referenceName": "CustomerFourthCoffeeRentalsParquet",
								"type": "DatasetReference"
							},
							"name": "CustomerFourthCoffeeRentalsSink"
						},
						{
							"dataset": {
								"referenceName": "CustomerOnPremRentalsParquet",
								"type": "DatasetReference"
							},
							"name": "CustomerOnPremRentalsSink"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumnForCloudSales"
						},
						{
							"name": "DerivedColumnForClousStreaming"
						},
						{
							"name": "DerivedColumnForFourthCoffeeRentals"
						},
						{
							"name": "DerivedColumnForOnPremRentals"
						},
						{
							"name": "UniqueCustomerID"
						},
						{
							"name": "UniqueCustomerID3"
						},
						{
							"name": "UniqueCustomerID4"
						},
						{
							"name": "UniqueCustomerID2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						}
					],
					"script": "source(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CloudSales\nsource(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CloudStreaming\nsource(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tZipCode as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FourthCoffeeRentals\nsource(output(\n\t\tCustomerID as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tZipCode as string,\n\t\tPhoneNumber as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> OnPremRentals\nCloudSales derive(Source = \"1\") ~> DerivedColumnForCloudSales\nCloudStreaming derive(source = \"1\") ~> DerivedColumnForClousStreaming\nFourthCoffeeRentals derive(source = \"3\") ~> DerivedColumnForFourthCoffeeRentals\nOnPremRentals derive(source = \"2\") ~> DerivedColumnForOnPremRentals\nDerivedColumnForCloudSales derive(UniqueCustomerID = Source+CustomerID,\n\t\tCreatedDate_Tr = toDate(CreatedDate),\n\t\tUpdatedDate_Tr = toDate(UpdatedDate)) ~> UniqueCustomerID\nDerivedColumnForFourthCoffeeRentals derive(UniqueCustomerID = source+CustomerID,\n\t\tCreatedDate_Tr = toDate(CreatedDate),\n\t\tUpdatedDate_Tr = toDate(UpdatedDate)) ~> UniqueCustomerID3\nDerivedColumnForOnPremRentals derive(UniqueCustomerID = source+CustomerID,\n\t\tCreatedDate_Tr = toDate(CreatedDate),\n\t\tUpdatedDate_Tr = toDate(UpdatedDate)) ~> UniqueCustomerID4\nDerivedColumnForClousStreaming derive(UniqueCustomerID = source+CustomerID,\n\t\tCreatedDate_Tr = toDate(CreatedDate),\n\t\tUpdatedDate_Tr = toDate(UpdatedDate)) ~> UniqueCustomerID2\nUniqueCustomerID3 select(mapColumn(\n\t\tCustomerID,\n\t\tLastName,\n\t\tFirstName,\n\t\tPhoneNumber,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tsource,\n\t\tUniqueCustomerID,\n\t\tCreatedDate_Tr,\n\t\tUpdatedDate_Tr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nUniqueCustomerID4 select(mapColumn(\n\t\tCustomerID,\n\t\tLastName,\n\t\tFirstName,\n\t\tPhoneNumber,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tsource,\n\t\tUniqueCustomerID,\n\t\tCreatedDate_Tr,\n\t\tUpdatedDate_Tr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nUniqueCustomerID select(mapColumn(\n\t\tCustomerID,\n\t\tLastName,\n\t\tFirstName,\n\t\tPhoneNumber,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tSource,\n\t\tUniqueCustomerID,\n\t\tCreatedDate_Tr,\n\t\tUpdatedDate_Tr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nUniqueCustomerID2 select(mapColumn(\n\t\tCustomerID,\n\t\tLastName,\n\t\tFirstName,\n\t\tPhoneNumber,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tsource,\n\t\tUniqueCustomerID,\n\t\tCreatedDate_Tr,\n\t\tUpdatedDate_Tr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CustomerCloudSalesSink\nSelect4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CustomerCloudStreamingParquetSink\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CustomerFourthCoffeeRentalsSink\nSelect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CustomerOnPremRentalsSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CuratedStreamingTransactions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CloudStreamingTransactions",
								"type": "DatasetReference"
							},
							"name": "CuratedStreaming1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CloudStreamingTransactions2",
								"type": "DatasetReference"
							},
							"name": "CloudStreaminSink"
						}
					],
					"transformations": [
						{
							"name": "CuratedStreaming2"
						},
						{
							"name": "CuratedStreaming3"
						}
					],
					"script": "source(output(\n\t\tTransactionID as string,\n\t\tCustomerID as string,\n\t\tMovieID as string,\n\t\tStreamStart as string,\n\t\tStreamEnd as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CuratedStreaming1\nCuratedStreaming1 derive(source = \"1\") ~> CuratedStreaming2\nCuratedStreaming2 derive(UniqueOrderID = source + TransactionID,\n\t\tUniqueMovieID = source + MovieID,\n\t\tUniqueCustomerID = source + CustomerID,\n\t\tStreamStart_Tr = toDate(StreamStart),\n\t\tStreamEnd_Tr = toDate(StreamEnd)) ~> CuratedStreaming3\nCuratedStreaming3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CloudStreaminSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipelineOnPremRentals')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_0e6",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_0e6",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "rawdata/onpremrentals/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_0e6",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_0e6",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Actors"
								},
								"destination": {
									"fileName": "dboActors.csv"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.csv"
								}
							},
							{
								"source": {
									"table": "MovieActors"
								},
								"destination": {
									"fileName": "dboMovieActors.csv"
								}
							},
							{
								"source": {
									"table": "Movies"
								},
								"destination": {
									"fileName": "dboMovies.csv"
								}
							},
							{
								"source": {
									"table": "OnlineMovieMappings"
								},
								"destination": {
									"fileName": "dboOnlineMovieMappings.csv"
								}
							},
							{
								"source": {
									"table": "Transactions"
								},
								"destination": {
									"fileName": "dboTransactions.csv"
								}
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-12T17:40:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_0e6')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customeraddresscuratedpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Address",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CuratedAddress2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CuratedAddress1": {},
									"CuratedAddress2": {},
									"CloudSalesAddressSink1": {},
									"CloudStreamingAddressSink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "customer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CuratedCustomerDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CloudSales": {},
									"CloudStreaming": {},
									"FourthCoffeeRentals": {},
									"OnPremRentals": {},
									"CustomerCloudSalesSink": {},
									"CustomerCloudStreamingParquetSink": {},
									"CustomerFourthCoffeeRentalsSink": {},
									"CustomerOnPremRentalsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CuratedAddress2')]",
				"[concat(variables('factoryId'), '/dataflows/CuratedCustomerDataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "transactionscuratedpipeline",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CuratedStreamingTransactions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CuratedStreaming1": {},
									"CloudStreaminSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CuratedStreamingTransactions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_bx8')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "IncrementalCopyPipeline1",
						"type": "PipelineReference"
					},
					"parameters": {
						"windowStart": {
							"type": "Expression",
							"value": "[parameters('Trigger_bx8_properties_pipeline_parameters_windowStart')]"
						}
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 1,
					"startTime": "2021-10-13T21:01:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/IncrementalCopyPipeline1')]"
			]
		}
	]
}